#!/usr/bin/env python3
"""
Script ƒë·ªÉ kh·ªüi t·∫°o PostgreSQL database cho Gen Book project.
Ch·∫°y script n√†y ƒë·ªÉ t·∫°o tables v√† d·ªØ li·ªáu m·∫´u.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.db.services.database_connection import init_database, engine
from src.db.services.crud import UserService, BookService
from src.db.models.schemas import UserCreate, BookCreate
from sqlalchemy.orm import Session
from sqlalchemy import text

def create_sample_data():
    """T·∫°o d·ªØ li·ªáu m·∫´u ƒë·ªÉ test"""
    from src.db.services.database_connection import SessionLocal

    db = SessionLocal()
    try:
        # T·∫°o user m·∫´u
        sample_user = UserCreate(
            email="admin@example.com",
            username="admin",
            full_name="Administrator",
            password="admin123",
            is_superuser=True
        )

        existing_user = UserService.get_user_by_email(db, sample_user.email)
        if not existing_user:
            user = UserService.create_user(db, sample_user)
            print(f"Created sample user: {user.username}")

            # T·∫°o book m·∫´u
            sample_book = BookCreate(
                title="S√°ch Thi·∫øu Nhi M·∫´u",
                book_type="Khoa h·ªçc vi·ªÖn t∆∞·ªüng",
                character_name="Ch√∫ B√© T√≤ M√≤",
                style="realistic",
                reference_image_url="https://example.com/sample_image.jpg",
                user_id=user.id
            )

            book = BookService.create_book(db, sample_book)
            print(f"Created sample book: {book.title}")
        else:
            print("Sample user already exists")

    finally:
        db.close()

def test_connection():
    """Test k·∫øt n·ªëi database"""
    try:
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1"))
            print("‚úì Database connection successful")
            return True
    except Exception as e:
        print(f"‚úó Database connection failed: {e}")
        return False

def main():
    """Main function"""
    print("Initializing PostgreSQL database for Gen Book...")

    # Test connection tr∆∞·ªõc
    if not test_connection():
        print("Please check your DATABASE_URL in .env file")
        sys.exit(1)

    # Kh·ªüi t·∫°o tables
    try:
        init_database()
        print("‚úì Database tables created successfully")
    except Exception as e:
        print(f"‚úó Failed to create database tables: {e}")
        sys.exit(1)

    # T·∫°o d·ªØ li·ªáu m·∫´u
    try:
        create_sample_data()
        print("‚úì Sample data created successfully")
    except Exception as e:
        print(f"‚úó Failed to create sample data: {e}")
        sys.exit(1)

    print("\nüéâ Database initialization completed!")
    print("You can now run the application with: python main.py")

if __name__ == "__main__":
    main()
